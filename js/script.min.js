"use strict"; !function () { class t { #a = null; #b = null; constructor(t, e, i, s) { this.parent = t, this.id = e, this.width = i, this.height = s } #c() { let e = document.querySelector(`${this.parent}`), i = document.createElement("canvas"); i.setAttribute("id", this.id), i.setAttribute("width", this.width), i.setAttribute("height", this.height), e.prepend(i) } #d() { this.#a = document.querySelector(`${this.id}`) } #e() { this.#b = this.#a.getContext("2d") } draw() { return this.#c(), this.#d(), this.#e(), this.#b } } class s { speedCount = 0; constructor(t, e, i, s, o, n, r) { this.size = t, this.headColor = e, this.bodyColor = i, this.coordinates = [[s, o], [s, o + t], [s, o + 2 * t]], this.speed = n, this.direction = r } draw(t) { t ? (r.shadowBlur = 20, t = !1) : r.shadowBlur = 4, r.shadowColor = "#6a2957", r.fillStyle = this.headColor, r.fillRect(this.coordinates[0][0], this.coordinates[0][1], this.size, this.size), r.shadowBlur = 4, r.fillStyle = this.bodyColor; for (let e = 1; e < this.coordinates.length; e++)r.fillRect(this.coordinates[e][0], this.coordinates[e][1], this.size, this.size) } determineDirection(t) { if (!d.pressingButton) { switch (t.code) { case "KeyW": "down" != this.direction && (this.direction = "up"); break; case "KeyS": "up" != this.direction && (this.direction = "down"); break; case "KeyA": "right" != this.direction && (this.direction = "left"); break; case "KeyD": "left" != this.direction && (this.direction = "right") }d.pressingButton = !0 } } performMovement() { for (let t = this.coordinates.length - 1; t > 0; t--)this.coordinates[t][0] = this.coordinates[t - 1][0], this.coordinates[t][1] = this.coordinates[t - 1][1]; switch (this.direction) { case "up": this.coordinates[0][1] -= this.size; break; case "down": this.coordinates[0][1] += this.size; break; case "left": this.coordinates[0][0] -= this.size; break; case "right": this.coordinates[0][0] += this.size } } performCoordinateCorrection() { this.coordinates[0][0] < 0 && (this.coordinates[0][0] = n.width - this.size), this.coordinates[0][0] >= n.width && (this.coordinates[0][0] = 0), this.coordinates[0][1] < 0 && (this.coordinates[0][1] = n.height - this.size), this.coordinates[0][1] >= n.height && (this.coordinates[0][1] = 0) } checkingSnakeEatingFood(t) { let e; this.coordinates[0][0] == t.x && this.coordinates[0][1] == t.y && (this.draw(!0), t.generateCoordinate(), this.enlargeBody(), d.points++, d.pointsElement.textContent = d.points, e = n.width / h.size * (n.height / h.size) - 3, d.points == e && (d.condition = "stop", d.message = "Вы выиграли! :)")) } enlargeBody() { this.coordinates.push([0, 0]) } trackCollision() { for (let t = 1; t < this.coordinates.length; t++)if (this.coordinates[0][0] == this.coordinates[t][0] && this.coordinates[0][1] == this.coordinates[t][1]) { d.condition = "stop", d.message = "Вы проиграли :("; break } } } class o { x = 0; y = 0; constructor(t, e) { this.size = t, this.color = e } draw() { r.shadowBlur = 4, r.shadowColor = "#2e4e25", r.fillStyle = this.color, r.fillRect(this.x, this.y, this.size, this.size) } generateCoordinate() { function t(t) { let e = Math.floor(Math.random() * t), i = e % h.size; return 0 != i && (e -= i), e } this.x = t(n.width), this.y = t(n.height); for (let e = 0; e < h.coordinates.length; e++)if (h.coordinates[e][0] == this.x && h.coordinates[e][1] == this.y) { this.generateCoordinate(); break } } } let n, r, h, a, d = { condition: "play", message: "", pressingButton: !1, stepElement: document.querySelector(".game__info-step"), pointsElement: document.querySelector(".game__info-points"), step: 0, points: 0 }; function c() { r.clearRect(0, 0, n.width, n.height), r.textAlign = "center", r.fillStyle = a.color, r.font = "30px Lena", r.fillText(d.message, n.width / 2, n.height / 2), r.fillStyle = h.bodyColor, r.font = "14px Lena", r.fillText("чтобы начать заново, нажмите F5", n.width / 2, n.height / 2 + 30) } document.addEventListener("DOMContentLoaded", () => { addEventListener("keypress", t => { h.determineDirection(t) }), n = new t(".game", "canvas", 400, 400), h = new s(20, "#d00077", "#a60561", 140, 240, 10, "up"), a = new o(20, "#096329"), r = n.draw(), h.draw(), a.generateCoordinate(), a.draw(), function t() { h.speedCount++ > h.speed && (h.speedCount = 0, r.clearRect(0, 0, n.width, n.height), h.performMovement(), h.performCoordinateCorrection(), h.draw(), a.draw(), h.checkingSnakeEatingFood(a), h.trackCollision(), d.pressingButton = !1, d.step++, d.stepElement.textContent = d.step), "play" === d.condition ? window.requestAnimationFrame(t) : setTimeout(c, 500) }() }) }();